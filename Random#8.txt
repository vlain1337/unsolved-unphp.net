<?php
date_default_timezone_set('Asia/Jakarta');

$bannedUsers = [];
$processedMessages = [];
$lastBotMessageID = [];
// JANGAN DIUBAH YANG INI
$keyFilePath = 'key.txt';
$key = readKeyFromFile($keyFilePath);

if (!$key) {
    error_log('KEY TIDAK DITEMUKAN!! TOLONG CEK KEMBALI FILE key.txt');
    exit(1);
}


$cookiesFilePath = 'cookie.txt';
$cookies = readCookiesFromFile($cookiesFilePath);

if (!$cookies) {
    error_log('COOKIE TIDAK DITEMUKAN!! TOLONG CEK KEMBALI FILE cookie.txt');
    exit(1);
}


$banwordFilePath = 'bannedText.txt';
$bannedWords = readBannedWordsFromFile($banwordFilePath);
if (!$bannedWords) {
    error_log('BANNEDWORD TIDAK DITEMUKAN!! TOLONG CEK KEMBALI FILE bannedText.txt');
    exit(1);
}



echo PHP_EOL . "LOGIN WITH KEY: $key" . PHP_EOL;
echo "SEDANG MENGAMBIL DATA LIVE..." . PHP_EOL;
// INI JUGA
getData();
inputLagi:
echo "-----------|[ MENU ]|-----------" . PHP_EOL;
echo "SILAHKAN PILIH MENU YANG ANDA INGINKAN" . PHP_EOL . PHP_EOL;
echo "1. GET INFO DATA RTMP LIVE" . PHP_EOL;
echo "2. AUTO KOMENTAR + AUTO GET USERSIG + AUTO BANNED FILTER KATA-KATA" . PHP_EOL;
echo "3. GET KOMENTAR + AUTO BANNED FILTER KATA-KATA" . PHP_EOL;
echo "4. AUTO PIN PRODUK RANDOM" . PHP_EOL;
echo "5. BALES KOMENTAR / PIN KOMENTAR" . PHP_EOL;
echo "6. AUTO SHOW VOUCHER SEtIAP 1 MENIT" . PHP_EOL;
echo "7. BOMB LIKE & BOMB SHARE" . PHP_EOL;
echo "8. AUTO KOMENTAR" . PHP_EOL;
echo "9. END LIVE" . PHP_EOL . PHP_EOL;

$menuSelect =  input("TENTUKAN PILIHAN ANDA ??");

if ($menuSelect == 1) {

    getRMTP();
} elseif ($menuSelect == 2) {
    echo PHP_EOL . "KATA-KATA PADA FILE KEYWORD YANG TERSEDIA" . PHP_EOL;
    $keywordData = include "keyword.php";

    // Menampilkan semua data pada $keywordData
    foreach ($keywordData as $keyword => $response) {
        echo "Keyword: $keyword, Response: $response" . PHP_EOL;
    }
    echo PHP_EOL . "\nPESAN :" . PHP_EOL;
    echo "EDIT KATA-KATA DIATAS PADA FILE keyword.php" . PHP_EOL;

    while (true) {
        checkMessage();
        sleep(3);
    }
} elseif ($menuSelect == 3) {

    while (true) {
        GetMessage();
        sleep(3);
    }
} elseif ($menuSelect == 4) {

    echo 'ATUR PIN PRODUK SESUAI PILIHANMU' . PHP_EOL;
    echo '1. SETIAP 60 DETIK' . PHP_EOL;
    echo '2. ATUR WAKTU SENDIRI' . PHP_EOL;
    $menuPin =  readline("PILIH MENU => : ");
    if ($menuPin == 1) {
        echo PHP_EOL . 'AUTO PIN PRODUK SETIAP 60 DETIK' . PHP_EOL;
        $jedaPin = 61;
        while (true) {
            showItem();
        }
    } elseif ($menuPin == 2) {
        echo "MASUKKAN DELAY PIN PRODUK" . PHP_EOL;
        $jedaPin = readline("DETIK *(1-10000) => : ");
        $menit = $jedaPin / 60;
        // memunculkan result detik / 60
        echo PHP_EOL . 'AUTO PIN PRODUK SETIAP ' . number_format($menit) . ' MENIT' . PHP_EOL;
        while (true) {
            showItem();
            echo 'JEDA... PIN PRODUK LAGI SETELAH ' . number_format($menit) . ' MENIT' . PHP_EOL;
            sleep($jedaPin);
        }
    } else {
        echo "[ GAGAL!! ] PILIHAN TIDAK DITEMUKAN!!" . PHP_EOL;
        goto inputLagi;
    }
} elseif ($menuSelect == 5) {

    menuKomen:
    do {
        echo "1. KOMEN BIASA\n2. PIN KOMEN" . PHP_EOL;
        $komenMenu =  readline("PILIH MENU => : ");
        if ($komenMenu == "1") {
            // PERULANGAN UNTUK MENGIRIM PESAN LAGI
            komenLagi:
            $katakataSHOPEE = input("TEXT KOMENTAR");
            $katakataSHOPEE = substr($katakataSHOPEE, 0, 150);
            // Pemeriksaan panjang string
            if (str_word_count($katakataSHOPEE) > 150) {
                echo 'PESAN TIDAK BOLEH LEBIH DARI 150 KATA';
            } else {
                komenLive($katakataSHOPEE) . PHP_EOL . PHP_EOL;
                goto komenLagi;
            }
        } else if ($komenMenu == "2") {
            pinLagi:
            // PERULANGAN UNTUK MENGIRIM PESAN LAGI
            $katakataSHOPEE = input("TEXT PIN KOMENTAR");
            $katakataSHOPEE = substr($katakataSHOPEE, 0, 150);
            // Pemeriksaan panjang string
            if (str_word_count($katakataSHOPEE) > 150) {
                echo 'PESAN TIDAK BOLEH LEBIH DARI 150 KATA';
            } else {
                pinkomenLive($katakataSHOPEE) . PHP_EOL . PHP_EOL;
                $pilihan =  readline("PIN KOMEN LAGI ?? (Y / N) => : ");
                do {
                    if ($pilihan == "y" || $pilihan == "Y") {
                        goto pinLagi;
                    } else {
                        exit(1);
                    }
                } while ($pilihan == "y" || $pilihan == "Y");
            }
        } else {
            echo "[ GAGAL!! ] PILIHAN TIDAK DITEMUKAN!!\nANDA AKAN DIKEMBALIKAN KEPILIHAN MENU!!" . PHP_EOL . PHP_EOL;
            sleep(2);
            goto menuKomen;
        }
    } while ($komenMenu == "1" || $komenMenu == "2");
} elseif ($menuSelect == 6) {

    echo PHP_EOL . 'AUTO SHOW VOUCHER SETIAP 1 MENIT' . PHP_EOL;
    while (true) {
        sleep(50); //jika ingin diubah ditambah 30, cntoh disamping 40. jika kamu jalankan dia akan delay hampir 1.menit 10detik karena ada delay tambahan dari loading api websitenya
        showVoc();
        echo 'JEDA... SHOW VOUCHER LAGI SETELAH 1MENIT' . PHP_EOL;
    }
} elseif ($menuSelect == 7) {

    menuShare:
    do {
        echo "1. BOMB LIKE\n2. BOMB SHARE" . PHP_EOL;
        $komenMenu =  readline("PILIH MENU => : ");
        if ($komenMenu == "1") {
            // PERULANGAN UNTUK MENGIRIM PESAN LAGI
            likeLagi:
            sendLike();
            $pilihan =  readline("KIRIM LIKE LAGI ?? (Y / N) => : ");
            do {
                if ($pilihan == "y" || $pilihan == "Y") {
                    goto likeLagi;
                } else {
                    goto menuShare;
                }
            } while ($pilihan == "y" || $pilihan == "Y");
        } else if ($komenMenu == "2") {
            shareLagi:
            sendShare();
            $pilihan =  readline("KIRIM SHARE LAGI ?? (Y / N) => : ");
            do {
                if ($pilihan == "y" || $pilihan == "Y") {
                    goto shareLagi;
                } else {
                    goto menuShare;
                }
            } while ($pilihan == "y" || $pilihan == "Y");
        } else {
            echo "[ GAGAL!! ] PILIHAN TIDAK DITEMUKAN!!\nANDA AKAN DIKEMBALIKAN KEPILIHAN MENU!!" . PHP_EOL . PHP_EOL;
            sleep(1);
            goto menuShare;
        }
    } while ($komenMenu == "1" || $komenMenu == "2");
} elseif ($menuSelect == 8) {

    $katakataSHOPEE = input("MASUKKAN TEXT KOMENTAR");
    $katakataSHOPEE = substr($katakataSHOPEE, 0, 150);
    // Pemeriksaan panjang string
    if (str_word_count($katakataSHOPEE) > 150) {
        echo 'PESAN TIDAK BOLEH LEBIH DARI 150 KATA';
    } else {
        echo "MASUKKAN JEDA KIRIM KOMEN" . PHP_EOL;
        $jedaNgulang = readline("DETIK *(1-10000) => : ");
        $menit = $jedaNgulang / 60;
        // memunculkan result detik / 60
        echo 'MENGIRIM PESAN BERULANG SETIAP ' . number_format($menit) . ' MENIT' . PHP_EOL;
        while (true) {
            komenLive($katakataSHOPEE);
            echo 'JEDA... MENGIRIM KOMEN LAGI SETELAH ' . number_format($menit) . ' MENIT' . PHP_EOL;
            sleep($jedaNgulang);
        }
    }
} elseif ($menuSelect == 9) {

    endLive();
} else {
    echo "[ GAGAL!! ] PILIHAN TIDAK DITEMUKAN!!" . PHP_EOL;
    goto inputLagi;
}

function input($text)
{
    echo $text . "  => : ";
    $select = trim(fgets(STDIN));
    return $select;
}
function getData()
{
    global $cookies, $key, $sessionId, $deviceId, $sellerId, $chatroomId, $shareurl, $usersig, $sellerId, $usernameId;
    $getSession = api("https://api-shopee.mas.mba/apiSess.php?key=$key&cookies=" . urlencode($cookies));
    $sessionData = json_decode($getSession, true);
    if (!$sessionData) {
        echo $getSession;
        exit(1);
    }

    $errCode = $sessionData["err_code"] ?? null;
    $data = $sessionData["data"] ?? null;

    if ($errCode === 0 && $data && isset($data["session"])) {
        $session = $data["session"];
        $sessionId = $session["session_id"] ?? '-';
        $deviceId = $session["device_id"] ?? '-';
        $sellerId = $session["uid"] ?? '-';
        $timestamp = $session["start_time"] ?? 0;
        $usernameId = $session['username'] ?? '-';
        $chatroomId = $session['chatroom_id'] ?? '-';
        $usersig = $data['usersig'] ?? '-';
        $shareurl = $data['share_url'] ?? '-';
        $Title = $session["title"] ?? '-';
        $Live = $session["status"] ?? '-';
        $timestamp_in_seconds = $timestamp / 1000;
        $tanggalMulai = strtoupper(date("d/M", $timestamp_in_seconds));
        $jamMulai = strtoupper(date("g:i a", $timestamp_in_seconds));
        $statusLive = ($Live == "1") ? "RUNNING" : "STOP";

        echo PHP_EOL . "--------|[ INFO DATA LIVE ]|--------" . PHP_EOL;
        echo 'LIVE TITLE: ' . $Title . PHP_EOL;
        echo 'LIVE TANGGAL: ' . $tanggalMulai . ' ' . $jamMulai . PHP_EOL;
        echo 'STATUS LIVE: ' . $statusLive . PHP_EOL;
        echo 'USERNAME: ' . $usernameId . PHP_EOL;
        echo 'SELLER ID: ' . $sellerId . PHP_EOL;
        echo PHP_EOL . '------|[ SESSION DATA LIVE ]|------' . PHP_EOL;
        echo 'SESSION LIVE: ' . $sessionId . PHP_EOL;
        echo 'DEVICEID LIVE: ' . $deviceId . PHP_EOL;
        echo 'CHATROOM LIVE: ' . $chatroomId . PHP_EOL;
        echo 'USERSIG LIVE: ' . $usersig . PHP_EOL;
        echo PHP_EOL . '------|[ SHARE URL LIVE ]|------' . PHP_EOL;
        echo 'URL LIVE: ' . $shareurl . PHP_EOL . PHP_EOL;
    } else {
        throw new Exception("Error obtaining SESSIONID: " . ($sessionData["err_msg"] ?? 'Unknown Error'));
    }
}

function getRMTP()
{
    global $cookies, $key, $sessionId;
    $dataRMTP = api("https://api-shopee.mas.mba/rmtp.php?key=$key&sessionid=$sessionId&cookies=" . urlencode($cookies));
    $RMTPdata = json_decode($dataRMTP, true);
    if ($RMTPdata === null && json_last_error() !== JSON_ERROR_NONE) {
        echo $dataRMTP;
        exit(1);
    }

    $errCode = $RMTPdata["err_code"] ?? null;
    $data = $RMTPdata["data"] ?? null;

    if ($errCode === 0 && $data && isset($data["push_url_list"])) {
        $keyLive = $data['push_url_list'][1];
        $misahKey = preg_split("/\/(live|livestreaming)\//", $keyLive, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
        $type = $misahKey[0];
        $rtmp = $type . '/' . $misahKey[1] . '/';
        $key = $misahKey[2];
        echo PHP_EOL . '===| STREAMING KEY INFO |===' . PHP_EOL . PHP_EOL;
        echo 'DASHBOARD LIVE: https://creator.shopee.co.id/dashboard/live/' . $sessionId . PHP_EOL;
        echo 'RTMP FULL: ' . $keyLive . PHP_EOL . PHP_EOL;
        echo 'RTMP: ' . $rtmp . PHP_EOL;
        echo 'KEY: ' . $key . PHP_EOL;
        echo PHP_EOL . '===| CARA LIVE SHOOPE |===' . PHP_EOL;
        echo 'CARA LIVENYA GIMANA??,' . PHP_EOL;
        echo 'LIVE LANGSUNG DARI SHOPE APP, DAN KETIKA SUDAH PLAY LANGSUNG AJH CLOSE APPNYA / HILANGIN,' . PHP_EOL;
        echo 'LALU START DARI MULTI LOOP / TOOLS YANG KALIAN GUNAKAN!!' . PHP_EOL . PHP_EOL;
        echo 'DATA RTMP DISAVE PADA FILE dataRTMP.txt' . PHP_EOL . PHP_EOL;
        $fp = fopen("dataRTMP.txt", 'w');
        fwrite($fp, "RMTP: $rtmp\nKEY: $key\n\nRTMP FULL: $keyLive");
        fclose($fp);
    } else {
        echo "ERROR GET DATA!!\nHARAP COBA KEMBALI!! MSG : " . strtoupper($RMTPdata['err_msg']) . PHP_EOL;
        exit(1);
    }
}


function banUser($uid)
{
    global $sessionId, $cookies;

    $banUrl = 'https://live.shopee.co.id/webapi/v1/session/' . $sessionId . '/comment/ban';

    $postData = [
        'is_ban' => true,
        'ban_uid' => $uid,
    ];

    $options = [
        'http' => [
            'header' => [
                'Cookie: ' . $cookies,
                'Content-Type: application/json',
            ],
            'method' => 'POST',
            'content' => json_encode($postData),
        ],
    ];

    $context = stream_context_create($options);

    $response = file_get_contents($banUrl, false, $context);

    if ($response) {
        $responseData = json_decode($response, true);
        $messages = $responseData['err_msg'];
        echo strtoupper($messages) . ' BANNED CHAT USER UID: ' . $uid . PHP_EOL . PHP_EOL;
    } else {
        echo 'GAGAL BANNED USER UID: ' . $uid . PHP_EOL;
    }
}

//bot komen
function getDataKomen()
{
    global $cookies, $key, $usersig;
    $dataUI = api("https://api-shopee.mas.mba/dataKomen.php?key=$key&cookies=" . urlencode($cookies));
    $UIdata = json_decode($dataUI, true);
    if ($UIdata === null && json_last_error() !== JSON_ERROR_NONE) {
        echo $dataUI;
        exit(1);
    }

    $errCode = $UIdata["err_code"] ?? null;
    $data = $UIdata["data"] ?? null;

    if ($errCode === 0 && $data && isset($data["usersig"])) {
        $usersig = $data['usersig'];
    } else {
        echo 'ERROR GET DATA!! MSG : ' . strtoupper($UIdata['err_msg']) . PHP_EOL;
        exit(1);
    }
}
function komenLive($message)
{
    getDataKomen();
    global $sessionId, $cookies, $deviceId, $responseKomen, $usersig;

    $komenUrl = 'https://live.shopee.co.id/api/v1/session/' . $sessionId . '/message';

    $postData = [
        'uuid' => $deviceId,
        'usersig' => $usersig,
        'content' => '{"type":101,"content":"' . $message . '"}',
        'pin' => false,
    ];

    $headers = [
        'Cookie: ' . $cookies,
        'Content-Type: application/json',
        'referer: https://live.shopee.co.id/pc/live?session=' . $sessionId,
    ];

    // cURL setup
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $komenUrl);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postData));
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    // Execute cURL session
    $responseKomen = curl_exec($ch);
    // Close cURL session
    curl_close($ch);

    // Parse JSON response
    $responseData = json_decode($responseKomen, true);

    // Check if err_msg exists
    if (isset($responseData['err_msg'])) {
        $errMsg = $responseData['err_msg'];

        // Add your custom handling for err_msg
        if ($errMsg === 'YourCustomErrorMessage') {
            echo 'Custom Error Handling: ' . $errMsg . PHP_EOL;
        } else {
            echo 'STATUS PESAN BOT: ' . strtoupper($errMsg);
        }
    }

    // Check if data.message_id exists
    if (isset($responseData['data']['message_id'])) {
        echo " ( " . $responseData['data']['message_id'] . " )" . PHP_EOL . PHP_EOL;
    }
}


function pinkomenLive($message)
{
    getDataKomen();
    global $sessionId, $cookies, $deviceId, $responseKomen, $usersig;

    $komenUrl = 'https://live.shopee.co.id/api/v1/session/' . $sessionId . '/message';

    $postData = [
        'uuid' => $deviceId,
        'usersig' => $usersig,
        'content' => '{"type":101,"content":"' . $message . '"}',
        'pin' => true,
    ];

    $headers = [
        'Cookie: ' . $cookies,
        'Content-Type: application/json',
        'referer: https://live.shopee.co.id/pc/live?session=' . $sessionId,
    ];

    // cURL setup
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $komenUrl);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postData));
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    // Execute cURL session
    $responseKomen = curl_exec($ch);
    // Close cURL session
    curl_close($ch);

    if ($responseKomen === FALSE) {
        echo 'ERROR MENGAMBIL DATA!!';
    } else {
        // Parse JSON response
        $responseData = json_decode($responseKomen, true);

        // Check if err_msg exists
        if (isset($responseData['err_msg'])) {
            $errMsg = $responseData['err_msg'];

            // Add your custom handling for err_msg
            if ($errMsg === 'YourCustomErrorMessage') {
                echo 'Custom Error Handling: ' . $errMsg . PHP_EOL;
            } else {
                echo 'STATUS PESAN BOT: ' . strtoupper($errMsg);
            }
        }

        // Check if data.message_id exists
        if (isset($responseData['data']['message_id'])) {
            echo " ( " . $responseData['data']['message_id'] . " )" . PHP_EOL . PHP_EOL;
        }
    }
}

function showVoc()
{
    global $cookies, $sessionId, $key;

    try {
        $url = 'https://api-shopee.mas.mba/voucher.php?key=' . $key . '&sessionid=' . $sessionId . '&cookies=' . urlencode($cookies);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

        $result = curl_exec($ch);

        if ($result === false) {
            throw new Exception('CURL ERROR: ' . curl_error($ch));
        }

        curl_close($ch);
        echo $result;
    } catch (Exception $e) {
        echo 'ERROR: ' . $e->getMessage() . PHP_EOL;
    }
}

function endLive()
{
    global $sessionId, $cookies, $err_msg;
    $apiUrl = "https://live.shopee.co.id/api/v1/session/$sessionId/end/";

    $requestHeaders = [
        'http' => [
            'method' => 'POST',
            'header' => implode("\r\n", [
                'Host: live.shopee.co.id',
                'User-Agent: ShopeeID/3.15.24 (com.beeasy.shopee.id; build:3.15.24; iOS 16.7.2) Alamofire/5.0.5 language=id app_type=1',
                'Content-Type: application/json',
                'Cookie: ' . $cookies,
            ]),
        ],
    ];

    $context = stream_context_create($requestHeaders);
    $response = file_get_contents($apiUrl, false, $context);

    $json_response = json_decode($response, true);
    if ($json_response !== null) {
        $err_code = isset($json_response['err_code']) ? $json_response['err_code'] : '';
        $err_msg = isset($json_response['err_msg']) ? $json_response['err_msg'] : '';

        if ($err_code === '0') {
            echo strtoupper($err_msg) . " MEMBERHENTIKAN STREAMING SESSIONID: $sessionId\n";
        } elseif ($err_code === '3000057') {
            echo "STREAMING SESSION $sessionId TIDAK ADA LIVE!!\n";
        } else {
            echo strtoupper($err_msg) . " MEMBERHENTIKAN STREAMING SESSION: $sessionId\n";
        }
    } else {
        echo strtoupper($err_msg) . " MEMBERHENTIKAN STREAMING!!\n";
    }
}

//auto komen + ban filter kata-kata
function checkMessage()
{
    global $chatroomId, $deviceId, $cookies, $processedMessages, $bannedUsers, $user, $lastBotMessageID, $userLastResponseTime, $sellerId;

    $apiUrl = 'https://chatroom-live.shopee.co.id/api/v1/fetch/chatroom/' . $chatroomId . '/message?uuid=' . $deviceId;

    $options = [
        'http' => [
            'header' => 'Cookie: ' . $cookies,
        ],
    ];

    $context = stream_context_create($options);

    $response = file_get_contents($apiUrl, false, $context);

    if ($response === false) {
        echo 'ERROR MENGAMBIL DATA!!' . PHP_EOL;
        return null; // Return null in case of an error
    }

    // Extract data from JSON response
    $responseJson = json_decode($response, true);

    // Check if data is available
    if (!isset($responseJson['data']['message'][0]['msgs'])) {
        return null;
    }

    $messages = $responseJson['data']['message'][0]['msgs'];
    $timestamp = $responseJson['data']['timestamp'];

    // Extract id, display_name, and content
    $extractedData = array_map(function ($message) {
        return [
            'id' => $message['id'],
            'uid' => $message['uid'],
            'nickname' => $message['nickname'],
            'display_name' => $message['display_name'],
            'content' => json_decode($message['content'], true)['content'],
        ];
    }, $messages);

    // Filter out already processed messages
    $newMessages = array_filter($extractedData, function ($message) use ($processedMessages) {
        return !in_array($message['content'], $processedMessages);
    });

    foreach ($newMessages as $message) {
        $user = $message['uid'];
        if ($sellerId === $user) {
            // Continue to the next iteration if the user is the seller
            continue;
        }

        // Print extracted data for new messages
        if (!empty($newMessages)) {
            $date = date('d/m H:i:s', $timestamp);
            echo "===| NEW MESSAGE |===" . PHP_EOL;
            echo "TIME: " . $date . PHP_EOL . "";
            echo "UID: " . $message['uid'] . PHP_EOL . "";
            echo "NAMA: " . $message['display_name'] . " ( " . $message['nickname'] . " )" . PHP_EOL;
            echo "MESSAGE: " . $message['content'] . PHP_EOL . "";
            echo "STATUS: ";



            // Add the processed message to the array
            $processedMessages[] = $message['content'];

            // Check for banned words
            if (containsBannedWords($message['content'])) {
                echo 'DITEMUKAN KATA-KATA YANG DIFILTER!!' . PHP_EOL;

                if (!in_array($message['uid'], $bannedUsers)) {
                    banUser($message['uid']);
                    $bannedUsers[] = $message['uid'];
                } else {
                    echo 'USER SUDAH DIBANNED CHAT!! SKIP!!' . PHP_EOL . PHP_EOL;
                }
            } else {
                echo 'TIDAK DITEMUKAN KATA-KATA YANG DIFILTER!!' . PHP_EOL . PHP_EOL;
            }



            $currentTime = time();
            // Check if the user has been responded to in the last 5 seconds
            if (isset($userLastResponseTime[$user]) && ($currentTime - $userLastResponseTime[$user]) < 5) {
                file_put_contents('auto_reply.txt', '');
                continue; // Skip processing this message
            }


            // Include file with keyword-response pairs
            $keywordData = include "keyword.php";

            // Check if the message contains a specific phrase to be skipped
            $skipPhrases = ["Saya bergabung Lelang Time!", "Saya bergabung Lelang Yuk!", "Saya bergabung Cepet Cepetan Time!", "Saya bergabung Cepet Cepetan Dapat harga murah!", "Saya bergabung Lelang Yuk Guyss!"];
            $skipMessage = false;
            foreach ($skipPhrases as $skipPhrase) {
                if (strpos(strtolower($message['content']), strtolower($skipPhrase)) !== false) {
                    $skipMessage = true;
                    break; // Stop checking after the first match
                }
            }

            if ($skipMessage) {
                // Skip processing this message
                file_put_contents('auto_reply.txt', '');
                continue;
            }

            $foundKeyword = false;
            foreach ($keywordData as $keyword => $response) {
                if (strpos(strtolower($message['content']), $keyword) !== false) {
                    $personalizedResponse = $keywordData['katakatasapa'] . " " . $message['nickname'] . ", " . $response;
                    file_put_contents('auto_reply.txt', $personalizedResponse);
                    $foundKeyword = true;
                    break; // Stop checking after the first match
                }
            }

            if (!$foundKeyword) {
                $defaultResponse = $keywordData['katakatasapa'] . " " . $message['nickname'] . ", " . $keywordData['katakatadefault'];
                file_put_contents('auto_reply.txt', $defaultResponse);
            }
        }
        // Update the last response time for the user
        $userLastResponseTime[$user] = $currentTime;
        $lastBotMessageID[] = $message;
    }
    $messageFilePath = 'auto_reply.txt';

    // Membaca isi file auto_reply.txt
    $message = file_get_contents($messageFilePath);

    // Mengirim pesan jika isi file tersedia
    if (!empty($message)) {
        komenLive($message);
        $lastBotMessageID[] = $message;

        // Menghapus isi file agar tidak dikirim lagi
        file_put_contents($messageFilePath, '');
    }
}

function GetMessage()
{
    global $chatroomId, $deviceId, $cookies, $processedMessages, $bannedUsers, $sessionId, $sellerId;

    $apiUrl = 'https://chatroom-live.shopee.co.id/api/v1/fetch/chatroom/' . $chatroomId . '/message?uuid=' . $deviceId;

    $options = [
        'http' => [
            'header' => 'Cookie: ' . $cookies,
        ],
    ];

    $context = stream_context_create($options);

    $response = file_get_contents($apiUrl, false, $context);

    if ($response === false) {
        echo 'ERROR MENGAMBIL DATA!!' . PHP_EOL;
        return null; // Return null in case of an error
    }

    // Extract data from JSON response
    $responseJson = json_decode($response, true);

    // Check if data is available
    if (isset($responseJson['data']['message'][0]['msgs'])) {
        $messages = $responseJson['data']['message'][0]['msgs'];
        $timestamp = $responseJson['data']['timestamp'];

        // Extract id, display_name, and content
        $extractedData = array_map(function ($message) {
            return [
                'id' => $message['id'],
                'uid' => $message['uid'],
                'nickname' => $message['nickname'],
                'display_name' => $message['display_name'],
                'content' => json_decode($message['content'], true)['content'],
            ];
        }, $messages);

        // Filter out already processed messages
        $newMessages = array_filter($extractedData, function ($message) use ($processedMessages) {
            return !in_array($message['content'], $processedMessages);
        });

        foreach ($newMessages as $message) {
            $user = $message['uid'];
            if ($sellerId === $user) {
                // Continue to the next iteration if the user is the seller
                continue;
            }

            // Print extracted data for new messages
            if (!empty($newMessages)) {
                $date = date('d/m H:i:s', $timestamp);
                echo "===| NEW MESSAGE |===" . PHP_EOL;
                echo "TIME: " . $date . PHP_EOL . "";
                echo "UID: " . $message['uid'] . PHP_EOL . "";
                echo "NAMA: " . $message['display_name'] . PHP_EOL . "";
                echo "MESSAGE: " . $message['content'] . PHP_EOL . "";
                echo "STATUS: ";

                // Add the processed message to the array
                $processedMessages[] = $message['content'];

                // Check for banned words
                if (containsBannedWords($message['content'])) {
                    echo 'KATA-KATA DILARANG DITEMUKAN!!' . PHP_EOL;

                    if (!in_array($message['uid'], $bannedUsers)) {
                        banUser($message['uid']);
                        $bannedUsers[] = $message['uid'];
                    } else {
                        echo 'USER SUDAH DIBANNED CHAT!! SKIP!!' . PHP_EOL . PHP_EOL;
                    }
                } else {
                    echo 'TIDAK DITEMUKAN KATA-KATA YANG DIFILTER!!' . PHP_EOL . PHP_EOL;
                }
            }
        }
    }
}

//pin produk
function showItem()
{
    global $cookies, $sessionId, $key;

    $pinProduk = api('https://api-shopee.mas.mba/pinProduk.php?key=' . $key . '&sessionid=' . $sessionId . '&cookies=' . urlencode($cookies));
    $Pindata = json_decode($pinProduk, true);
    if (!$Pindata) {
        echo $pinProduk;
    }
}

function sendLike()
{
    global $cookieFile, $key, $sessionId;

    try {
        echo "SEND LIKE TO SESSIONID : $sessionId\n";
        $cookieAkunLain = readline('FILE COOKIE AKUN LAIN => ');
        $cookieFile = file_get_contents($cookieAkunLain);
        $count = readline('BERAPA KALI KIRIM SHARE *(1x KIRIM 50) => : ');

        for ($index = 1; $index <= $count; $index++) {
            try {
                $dataUI = api("https://api-shopee.mas.mba/like.php?key=$key&sessionid=$sessionId&cookies=" . urlencode($cookieFile));
                $UIdata = json_decode($dataUI, true);
                if ($UIdata === null && json_last_error() !== JSON_ERROR_NONE) {
                    echo $dataUI;
                    exit(1);
                }
                // Mendapatkan data sesi
                $err_code = $UIdata['err_code'];
                $err_msg = $UIdata['err_msg'];

                $status = ($err_code === 0) ? 'BERHASIL' : 'GAGAL';
                echo "$status KIRIM LIKE KE SESSIONID: $sessionId | #$index/$count |\n";
            } catch (Exception $error) {
                echo $error . PHP_EOL;
                echo "GAGAL MENGIRIM LIKE!!\n";
                break;
            }
        }
    } catch (Exception $error) {
        echo $error . PHP_EOL;
    }
}


function sendShare()
{
    global $cookieFile, $key, $sessionId;


    try {
        echo "SEND SHARE TO SESSIONID : $sessionId\n";
        $cookieAkunLain = readline('FILE COOKIE AKUN LAIN => ');
        $cookieFile = file_get_contents($cookieAkunLain);
        $count = readline('BERAPA KALI KIRIM SHARE *(1x KIRIM 50) => : ');

        for ($index = 1; $index <= $count; $index++) {
            try {
                $dataUI = api("https://api-shopee.mas.mba/share.php?key=$key&sessionid=$sessionId&cookies=" . urlencode($cookieFile));
                $UIdata = json_decode($dataUI, true);
                if ($UIdata === null && json_last_error() !== JSON_ERROR_NONE) {
                    echo $dataUI;
                    exit(1);
                }
                // Mendapatkan data sesi
                $err_code = $UIdata['err_code'];
                $err_msg = $UIdata['err_msg'];

                $status = ($err_code === 0) ? 'BERHASIL' : 'GAGAL';
                echo "$status KIRIM SHARE KE SESSIONID: $sessionId | #$index/$count |\n";
            } catch (Exception $error) {
                echo $error . PHP_EOL;
                echo "GAGAL MENGIRIM SHARE!!\n";
                break;
            }
        }
    } catch (Exception $error) {
        echo $error . PHP_EOL;
    }
}

function api($url)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
    curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

    $resultApi = curl_exec($ch);
    curl_close($ch);
    return $resultApi;
}


function readBannedWordsFromFile($filePath)
{
    try {
        $bannedWords = explode(PHP_EOL . "", file_get_contents($filePath));
        // Menghapus string kosong atau yang hanya terdiri dari spasi dari $bannedWords
        $bannedWords = array_filter($bannedWords, function ($word) {
            return trim($word) !== '';
        });
        $bannedWords = array_map('trim', $bannedWords);
        return $bannedWords;
    } catch (Exception $error) {
        error_log('ERROR!! GAGAL MEMBACA DATA BANNED DARI FILE: ' . $error->getMessage());
        return [];
    }
}

function readKeyFromFile($filePath)
{
    try {
        $cookies = file_get_contents($filePath);
        return trim($cookies);
    } catch (Exception $error) {
        error_log('ERROR!! GAGAL MEMBACA DATA KEY DARI FILE: ' . $error->getMessage());
        return null;
    }
}
function containsBannedWords($content)
{
    global $bannedWords;

    $lowerContent = strtolower($content);
    return array_reduce($bannedWords, function ($carry, $word) use ($lowerContent) {
        return $carry || strpos($lowerContent, strtolower($word)) !== false;
    }, false);
}

function readCookiesFromFile($filePath)
{
    try {
        $cookies = file_get_contents($filePath);
        return trim($cookies);
    } catch (Exception $error) {
        error_log('ERROR!! GAGAL MEMBACA DATA COOKIE DARI FILE: ' . $error->getMessage());
        return null;
    }
}
;?>